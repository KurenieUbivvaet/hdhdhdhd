// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Technoservice.Models
{
    public partial class TehnoserviceContext : DbContext
    {
        public TehnoserviceContext()
        {
        }

        public TehnoserviceContext(DbContextOptions<TehnoserviceContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Shape> Shape { get; set; }
        public virtual DbSet<ShapePerformers> ShapePerformers { get; set; }
        public virtual DbSet<ShapeStatus> ShapeStatus { get; set; }
        public virtual DbSet<Specifications> Specifications { get; set; }
        public virtual DbSet<TypeOfMalfunction> TypeOfMalfunction { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=Tehnoservice;Integrated Security=True;Encrypt=false");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Equipment>(entity =>
            {
                entity.HasKey(e => e.IdEquipment);

                entity.Property(e => e.EquipmentTitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSpecificationNavigation)
                    .WithMany(p => p.Equipment)
                    .HasForeignKey(d => d.IdSpecification)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Equipment_Specifications");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.IdRole);

                entity.Property(e => e.RoleTitle)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Shape>(entity =>
            {
                entity.HasKey(e => e.IdShape);

                entity.Property(e => e.DateOfEdition).HasColumnType("datetime");

                entity.Property(e => e.ShapeDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEquipmentNavigation)
                    .WithMany(p => p.Shape)
                    .HasForeignKey(d => d.IdEquipment)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shape_Shape");

                entity.HasOne(d => d.IdShapeStatusNavigation)
                    .WithMany(p => p.Shape)
                    .HasForeignKey(d => d.IdShapeStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shape_ShapeStatus");

                entity.HasOne(d => d.IdShapeStatus1)
                    .WithMany(p => p.Shape)
                    .HasForeignKey(d => d.IdShapeStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shape_TypeOfMalfunction");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Shape)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shape_Users");
            });

            modelBuilder.Entity<ShapePerformers>(entity =>
            {
                entity.HasKey(e => e.IdShapePerfomers);

                entity.HasOne(d => d.IdShapeNavigation)
                    .WithMany(p => p.ShapePerformers)
                    .HasForeignKey(d => d.IdShape)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShapePerformers_Shape");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.ShapePerformers)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShapePerformers_Users");
            });

            modelBuilder.Entity<ShapeStatus>(entity =>
            {
                entity.HasKey(e => e.IdShapeStatus);

                entity.Property(e => e.TitleShapeStatus)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Specifications>(entity =>
            {
                entity.HasKey(e => e.IdSpecification);

                entity.Property(e => e.DescriptionSpecification)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleSpecification)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TypeOfMalfunction>(entity =>
            {
                entity.HasKey(e => e.IdTypeOfMalfunction);

                entity.Property(e => e.DescriptionTypeOfMalfunction)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TitleTypeOfMalfunction)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserPatronymic)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserSurname)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdRoleNavigation)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.IdRole)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_Role");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}